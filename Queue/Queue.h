#pragma once
#include <iostream>

using namespace std;

class queue // Класс очереди
{
private:
	struct queue_ob // Структура для хранения элементов очереди
	{
		int value; // Поле для хранения значения элемента очереди
		queue_ob *addr; // Поле для хранения следующего элемента
	};

	queue_ob *head; // Указатель, хранящий адрес головы очереди
	queue_ob *tail; // Указатель, хранящий адрес хвоста очереди
	int size; // Текущий размер очереди

public:
	queue(int x) // Конструктор класса
				 // В параметр передается голова очереди
	{
		head = new(queue_ob); // Выделяем память под элемент
		tail = head; // При создании очереди хвост и голова являются одним и тем же элементом
		head->value = x; // Записываем значение
		head->addr = 0; // Адрес равен нулю, так как следующего элемента пока нет
		size = 1; // После выделения памяти и заполнения полей структуры очередь стала иметь размер 1
	}

/*	queue() // Пустой конструктор в случае, если его вызывают без параметров

	{
		head = new(queue_ob);
		tail = head;
		head->value = 0; // Записываем значение, равное нулю по умолчанию
		head->addr = 0;
		size = 1;
	}

	int stack_size() // Функция возвращает размер очереди (кол-во элементов)
	{
		return size;
	}*/

	void append(int value) // Добавляет (вталкивает) элемент в очередь
	{
		size++; // Кол-во элементов очереди увеличивается
		queue_ob *temp = new(queue_ob); // Выделяем память под новый хвост очереди
		temp->addr = 0; // Записываем в поле адреса нового хвоста ноль, так как за ним ничего нету
		temp->value = value; //Заполняем поле значения нового хвоста
		tail->addr = temp; // Записываем в поле адреса старого хвоста адрес нового хвоста
		tail = temp; // Записываем в указель хвоста адрес действительного хвоста
	}

	void extract(int *ret) // Удаляет элемент (выталкивает) и возвращает его
						   // По адресу, хранящемся в ret, передается значение удаляемой головы
	{
		if (size == 0)
		{
			cout << "Stack is empty - nothing to delete!" << endl;
			return;
		}

		queue_ob *temp = head; // Записываем адрес головы
		*ret = head->value; // Записываем значение головы
		head = head->addr; // Изменяем адрес головы
		delete temp;  // Удаляем старую голову
		size--; // Уменьшаем размер
	}

	void output(int *ret) // Выгружает значение по адресу, передаваемому в парметре
	{
		if (size == 0) // Если очередь пуста(size == 0), то ничего не выгружает
		{
			cout << "Stack is empty!" << endl;
			return;
		}
		*ret = head->value; // Выгружает значение головы
	}

}; // Конец класса очереди